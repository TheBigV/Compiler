glyph:
	digit:
	0-9
	letter:
	a-z, A-Z, _
	bracket:
	{}, (), <>, []
	string:
	'', ""
	marker:
	~, !, @, #, $, %, ^, &, 8, -, +, *, /, \, |, <, >, =
		There is some collision of <> block and <, > markers. Sheeeeiit.
	special:
	'.', ',', ';', ':',  

blocks:
	Pair of {}, (), <>, [] brackets forming a block
	Block is an instruction, so you can use them for executing lot of code in the one condition
	After block ends, it's clean up every data, thats are created within
	Block can be named, placing the name before it start:
		examples:
			correct:
				myBlock { ... }
			incorrect:
				myBlock; { ... }
	You can jump within a block, using .begin and .end keywords

indetifiers:
	Any uninterrupted sequence of digit/letter or marker are indetifier
		examples:
			correct:
				a, a1, 1a, *, *=, =*, &^@
			incorrect:
				.a, *a, =a=, 1.a

literals:
	Any sequence beginning with \', and ending with \' are literal

keywords:
	[.if .else]
		.if %condition%; %expression%
		execute %expression% if %condition% are true
	
		.if %condition%; %expression1%
		.else %expression2%
		execute %expression1% if %condition% are true, otherwise %expression2%

	[.begin .end]
		.begin;
		Go to the begin of the current block. Use only within the blocks
		.end;
		Go to the end of the current block. Use only within the blocks

types:
	.int8 - signed 8-bit integer

current features aviable:
	{} blocks
	.if/.else keywords
	.begin/.end keywords
	.int8 type
